{
  "Chain": {
    "Emap": {
      "QmNrvuRMyp3EEHB2p2YTQSmRhN37T1bnRiFcyNZp7GXpMJ": 1,
      "QmYWZUcz7qR3nHqKx4TbzVA9rZN4vZfoqSccdZ2o2Y4Pdp": 4,
      "QmZ9aNE37BX8hN1NtsxodvyKykeGZgFCR1LCKWxy8vGSpA": 7,
      "QmaEwAzgvGe2Eg9f1rBANX65B8NN7VUfd5nSqZm6biX9SS": 0,
      "Qmam3RcdqRcDEWrvZTtkseFP2iP57PKcjC6LEzuVHZbHJB": 6,
      "Qmc9wG9Je5HRzNcAG57dM7PRh2JbzNeaFgmZpMfofKJaoA": 3,
      "QmdksisNZRmPcwePkbwuTcUexnxup6TWArrQrfKWsZY1LK": 2,
      "QmeiaUoWnDySbwCwcLD6nwJyAwDbLpw2EYc2nLCFFJVPUn": 5
    },
    "Entries": [
      {
        "C": ""
      },
      {
        "C": {
          "Identity": "art@Philips-MacBook-Pro.local",
          "PublicKey": "CAESID37VQJX187wd8tEPwSel72q0xOchOYRlSV0y61t3BNA",
          "Revocation": null
        }
      },
      {
        "C": "{\"anchorText\":\"\",\"anchorType\":\"anchorTypes\"}"
      },
      {
        "C": "{\"anchorText\":\"\",\"anchorType\":\"handle\"}"
      },
      {
        "C": "{\"Links\":[{\"Base\":\"QmdksisNZRmPcwePkbwuTcUexnxup6TWArrQrfKWsZY1LK\",\"Link\":\"Qmc9wG9Je5HRzNcAG57dM7PRh2JbzNeaFgmZpMfofKJaoA\",\"Tag\":\"handle\"}]}"
      },
      {
        "C": "{\"anchorText\":\"Archer\",\"anchorType\":\"handle\"}"
      },
      {
        "C": "{\"Links\":[{\"Base\":\"Qmc9wG9Je5HRzNcAG57dM7PRh2JbzNeaFgmZpMfofKJaoA\",\"Link\":\"QmeiaUoWnDySbwCwcLD6nwJyAwDbLpw2EYc2nLCFFJVPUn\",\"Tag\":\"Archer\"}]}"
      },
      {
        "C": "QmeiaUoWnDySbwCwcLD6nwJyAwDbLpw2EYc2nLCFFJVPUn"
      }
    ],
    "Hashes": [
      {
        "H": "EiDqRkWtt28WT4E1oknYiaqd/gtzD4cQ0u8mNHushrljOw=="
      },
      {
        "H": "EiDSpZZP8kGuPJFQChep9WQnagbcQSqaFGKtYWaGeFCYcA=="
      },
      {
        "H": "EiBge+ZX9DhqjsZbaPXAwGQAXvT4IKc+Umhmyf9CBJNNhw=="
      },
      {
        "H": "EiAlOnQ+j/+0dsr2R69B3k11NV4DLfo3z5iz9+vmm375Qw=="
      },
      {
        "H": "EiAT3UbreBCoasEkN9vUvN9xKZjjCBU1VTwmbolHAygT2g=="
      },
      {
        "H": "EiBNy1ReY1AyycE+2BZl7PRPu7lwT13AwVw6SGbTYIcmZw=="
      },
      {
        "H": "EiBElU9+5LOu5CtvwLkKEy6OOnfpvvyPjfi+9x5Xzg25+A=="
      },
      {
        "H": "EiCwptIpxymIRzJ98axzZaeddRB+YOcNknKI/7KDkGPz/w=="
      }
    ],
    "Headers": [
      {
        "Change": {
          "Action": "",
          "Hash": {
            "H": "AA=="
          }
        },
        "EntryLink": {
          "H": "EiCw1V+rsucE6CMGWX1dfYR1/Mu+sqgS2MrAQdmZ1J5vow=="
        },
        "HeaderLink": {
          "H": "AA=="
        },
        "Sig": {
          "S": "OPp1Na6fKiqvyCDvx+cNQ7jFY4n+4vuJkITBOw9foo5IOOMLoPWVmvwxvfkEk4EM5EzvMGyNCl4CTht3qBuWAg=="
        },
        "Time": "2018-03-09T11:59:52.006034+11:00",
        "Type": "%dna",
        "TypeLink": {
          "H": "AA=="
        }
      },
      {
        "Change": {
          "Action": "",
          "Hash": {
            "H": "AA=="
          }
        },
        "EntryLink": {
          "H": "EiAHwbxw/euOLLhtrOrACvWKlklr5FOyo/EZwPllGovLVQ=="
        },
        "HeaderLink": {
          "H": "EiDqRkWtt28WT4E1oknYiaqd/gtzD4cQ0u8mNHushrljOw=="
        },
        "Sig": {
          "S": "rOI2O8sqztsg94U028v2IGfl15R+SI+h6bZqY+8HMSciSABt28zgPpoZa9LnZhx1zAARUuXwrtO7BAhRQZ//Bg=="
        },
        "Time": "2018-03-09T11:59:52.006771+11:00",
        "Type": "%agent",
        "TypeLink": {
          "H": "AA=="
        }
      },
      {
        "Change": {
          "Action": "",
          "Hash": {
            "H": "AA=="
          }
        },
        "EntryLink": {
          "H": "EiDlE/UTb0rlwqD3KxHLPzsjmM7ZuqsV8Y4Wi4rEO4hQuA=="
        },
        "HeaderLink": {
          "H": "EiDSpZZP8kGuPJFQChep9WQnagbcQSqaFGKtYWaGeFCYcA=="
        },
        "Sig": {
          "S": "nJkofcMsQ2cq4btOkm/GlY+ZlwL14CJUNfla09eiL66SusRoPlXZGu0HmdK0OpOSGvcE7ASXIhCKFi9p759xBw=="
        },
        "Time": "2018-03-09T12:00:00.019113+11:00",
        "Type": "anchor",
        "TypeLink": {
          "H": "AA=="
        }
      },
      {
        "Change": {
          "Action": "",
          "Hash": {
            "H": "AA=="
          }
        },
        "EntryLink": {
          "H": "EiDNRPGi3e8QquOeJp64pAqGWIp3Dmo/C84H0ZPz91zyIQ=="
        },
        "HeaderLink": {
          "H": "EiBge+ZX9DhqjsZbaPXAwGQAXvT4IKc+Umhmyf9CBJNNhw=="
        },
        "Sig": {
          "S": "NfUVfRqNbGYm0CLokop/3A9eiY4wg843yuK8EeERLRf1i95VWF4/HI/vSu4OoWEdVHZztRqERhZnNkkhjlZ0Ag=="
        },
        "Time": "2018-03-09T12:00:00.023454+11:00",
        "Type": "anchor",
        "TypeLink": {
          "H": "EiBge+ZX9DhqjsZbaPXAwGQAXvT4IKc+Umhmyf9CBJNNhw=="
        }
      },
      {
        "Change": {
          "Action": "",
          "Hash": {
            "H": "AA=="
          }
        },
        "EntryLink": {
          "H": "EiCXHsLM9Z5HV+FwJuQ839eNVf3PTrGqrEU4FccqXFAIdw=="
        },
        "HeaderLink": {
          "H": "EiAlOnQ+j/+0dsr2R69B3k11NV4DLfo3z5iz9+vmm375Qw=="
        },
        "Sig": {
          "S": "sirTy/EnNnjY3TUyXNhSxoCbB/3swuEcJh2AVgbk+vZy2LqKdPcnKOOMYKy4u1Xebb1G/QqC847obVFvEr9IDA=="
        },
        "Time": "2018-03-09T12:00:00.026316+11:00",
        "Type": "anchor_link",
        "TypeLink": {
          "H": "AA=="
        }
      },
      {
        "Change": {
          "Action": "",
          "Hash": {
            "H": "AA=="
          }
        },
        "EntryLink": {
          "H": "EiDzWPyH8yturNwhTaDqJn7pIuUtbyh2sjS9rykbRrIskw=="
        },
        "HeaderLink": {
          "H": "EiAT3UbreBCoasEkN9vUvN9xKZjjCBU1VTwmbolHAygT2g=="
        },
        "Sig": {
          "S": "RdSB1Wsi4gabWl7wtxPpkolQJjguQ4OQUr2dYt+tWp4IUythIOQPHrYiOpkjBDOTivpN8jd7LFI+yVyjLaIpBw=="
        },
        "Time": "2018-03-09T12:00:00.030567+11:00",
        "Type": "anchor",
        "TypeLink": {
          "H": "EiAlOnQ+j/+0dsr2R69B3k11NV4DLfo3z5iz9+vmm375Qw=="
        }
      },
      {
        "Change": {
          "Action": "",
          "Hash": {
            "H": "AA=="
          }
        },
        "EntryLink": {
          "H": "EiC4i94CBpHFBlScWDudaCFvEL0hNaMxk3TYUKSW5qaLdA=="
        },
        "HeaderLink": {
          "H": "EiBNy1ReY1AyycE+2BZl7PRPu7lwT13AwVw6SGbTYIcmZw=="
        },
        "Sig": {
          "S": "SGDysM2aGQwldqTSNdSaxCxLsA8p/eza6d2gmhL/cMvlqoa5qY3sK/44hBfji7Zu91mXF+mBtKM4G8AiUFaRDQ=="
        },
        "Time": "2018-03-09T12:00:00.033354+11:00",
        "Type": "anchor_link",
        "TypeLink": {
          "H": "EiAT3UbreBCoasEkN9vUvN9xKZjjCBU1VTwmbolHAygT2g=="
        }
      },
      {
        "Change": {
          "Action": "",
          "Hash": {
            "H": "AA=="
          }
        },
        "EntryLink": {
          "H": "EiCgmkHD+SQbqWxr6u5ZTQjwS3pz3BE3Ng13SUluZ6fbuw=="
        },
        "HeaderLink": {
          "H": "EiBElU9+5LOu5CtvwLkKEy6OOnfpvvyPjfi+9x5Xzg25+A=="
        },
        "Sig": {
          "S": "lyY4RXqszRRmkf1k+X0Hl/3RdKMq6dMQaO5+OIL+UTAWGibPz7uJ9reftv08eHodObXYplcVvPo5AqZI+bBbBA=="
        },
        "Time": "2018-03-09T12:00:00.036339+11:00",
        "Type": "handle",
        "TypeLink": {
          "H": "AA=="
        }
      }
    ],
    "Hmap": {
      "QmPgC9uPsdFRqmG9r4haPfupJkTSdKziZzi1YyrDMkyze5": 4,
      "QmQqyVTTMt6GDHMyT6pkrCfEVDJauN3paZqc6TGBkqD6NE": 3,
      "QmSxNV2M2F32Q76UQ9veHxLmkas97pt1JyMysmi1it992F": 6,
      "QmTaKvmvW3dNUcVZKSUetkvktEunALBoAT6nEYYSH4NcQE": 5,
      "QmUqHRfi1AN2Yw23fc3F7BBSNG8bXLL45UDkUc1LctHmTc": 2,
      "QmaEE13mAyrGkrswcdp7vwRgztJ8UvGZR7rMifBGic9QTG": 7,
      "QmcWvmju1SGArRKTFP67Dddjmnnxm7aBZpYQ36jjhBHKhy": 1,
      "Qme7AG2Wu6Cp25aiVD2eZozgV5qg2oJcDaF4LvZAi5WwNz": 0
    },
    "TypeTops": {
      "%agent": 1,
      "%dna": 0,
      "anchor": 5,
      "anchor_link": 6,
      "handle": 7
    }
  }
}
